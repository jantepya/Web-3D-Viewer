{"version":3,"sources":["reportWebVitals.js","components/navbar/navbar.js","components/viewer/sidebar.js","utils/meshLoader.js","components/viewer/viewer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","useState","expand","to","NavbarBrand","SceneListItem","props","className","value","uuid","onSelect","name","SideBar","removeFromSceneList","sceneItems","state","index","findIndex","item","splice","setState","onItemRemoved","addToSceneList","prevState","onDeleteButtonClicked","sceneList","current","selectedOptions","onUploadButtonClicked","input","document","createElement","type","onchange","onFileSelected","click","render","Button","color","onClick","this","multiple","ref","map","React","createRef","Component","SupportedFileTypes","MeshLoader","loaders","dracoLoader","DRACOLoader","setDecoderConfig","setDecoderPath","preload","drc","plyLoader","PLYLoader","ply","stlLoader","STLLoader","stl","onLoad","onProgress","onError","prototype","LoadURL","url","fileName","fileType","filename","substring","lastIndexOf","length","GetFileTypeFromName","loader","load","geometry","LoadFile","file","reader","FileReader","onload","result","readAsDataURL","Viewer","addMeshToScene","material","THREE","flatShading","mesh","scene","add","sideBar","removeElementFromScene","object","getObjectByProperty","dispose","remove","onWindowResize","width","window","innerWidth","height","innerHeight","camera","aspect","updateProjectionMatrix","renderer","setSize","animate","requestAnimationFrame","render3D","onFileSelectedForUpload","event","target","files","meshLoader","mount","alpha","setPixelRatio","devicePixelRatio","appendChild","domElement","position","set","orbitControls","OrbitControls","dLight","console","log","loaded","total","addEventListener","ReactDOM","StrictMode","getElementById"],"mappings":"0OAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gCCuBCQ,G,MAhBA,WAAY,IAAD,EACMC,oBAAS,GADf,6BAKtB,OACI,8BACI,cAAC,IAAD,CAAaC,OAAO,KAApB,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SACI,cAACC,EAAA,EAAD,8B,2ECnBdC,G,MAAgB,SAAUC,GAC5B,OACI,wBAAQC,UAAU,gBAAgBC,MAAOF,EAAMG,KAAMC,SAAUJ,EAAMI,SAArE,SACKJ,EAAMK,SAKEC,E,kDACjB,aAAe,IAAD,8BACV,gBAOJC,oBAAsB,SAACJ,GACnB,IAAIK,EAAU,YAAO,EAAKC,MAAMD,YAC5BE,EAAQF,EAAWG,WAAU,SAACC,GAAD,OAAUA,EAAKT,OAASA,MAC1C,IAAXO,IACAF,EAAWK,OAAOH,EAAO,GACzB,EAAKI,SAAS,CAACN,WAAYA,IAC3B,EAAKR,MAAMe,cAAcZ,KAdnB,EAkBda,eAAiB,SAACJ,GACd,EAAKE,UAAS,SAAAG,GAAS,MAAK,CAACT,WAAW,GAAD,mBAAMS,EAAUT,YAAhB,CAA4BI,SAnBzD,EAsBdM,sBAAwB,WACpB,GAAI,EAAKC,UAAUC,SAAW,EAAKD,UAAUC,QAAQC,gBAAiB,CAAC,IAAD,gBACjD,EAAKF,UAAUC,QAAQC,iBAD0B,IAClE,2BAAyD,CAAC,IAAjDT,EAAgD,QACrD,EAAKL,oBAAoBK,EAAKV,QAFgC,iCAvB5D,EA8BdoB,sBAAwB,WACpB,IAAIC,EAAQC,SAASC,cAAc,SACnCF,EAAMG,KAAO,OACbH,EAAMI,SAAW,EAAK3B,MAAM4B,eAC5BL,EAAMM,SAlCI,EAqCdC,OAAS,WACL,OACI,sBAAK7B,UAAU,UAAf,UACI,cAAC8B,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASC,KAAKZ,sBAAtC,eACA,cAACS,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASC,KAAKhB,sBAArC,eAEA,+BACI,yBAAQiB,SAAS,WAAWC,IAAKF,KAAKf,UAAtC,cACIe,KAAKzB,MAAMD,WAAW6B,KAAI,SAAAzB,GACtB,OAAO,cAAC,EAAD,eAAmBA,gBA5C9C,EAAKO,UAAYmB,IAAMC,YACvB,EAAK9B,MAAQ,CACTD,WAAY,IAJN,E,UADmB8B,IAAME,W,wBCRrCC,EAAqB,CACvB,IAAO,EACP,IAAO,EACP,IAAO,GAQLC,EAAa,WACfR,KAAKS,QAAU,GAEf,IAAMC,EAAc,IAAIC,IACxBD,EAAYE,iBAAkB,CAACpB,KAAK,SACpCkB,EAAYG,eAAgB,2DAC5BH,EAAYI,UACZd,KAAKS,QAAQF,EAAmBQ,KAAOL,EAEvC,IAAMM,EAAY,IAAIC,IACtBjB,KAAKS,QAAQF,EAAmBW,KAAOF,EAEvC,IAAMG,EAAY,IAAIC,IACtBpB,KAAKS,QAAQF,EAAmBc,KAAOF,EAEvCnB,KAAKsB,OAAS,KACdtB,KAAKuB,WAAa,KAClBvB,KAAKwB,QAAU,MAGnBhB,EAAWiB,UAAUC,QAAU,SAASC,EAAKC,GAAW,IAAD,OAC/CC,EA1BoB,SAASC,GACjC,IAAItC,EAAOsC,EAASC,UAAUD,EAASE,YAAY,KAAK,EAAGF,EAASG,SAAWH,EAC/E,OAAOvB,EAAmBf,GAwBX0C,CAAoBN,GAC/BO,EAASnC,KAAKS,QAAQoB,GAC1B,GAAIM,EAAQ,CAORA,EAAOC,KAAKT,GANC,SAACU,GACN,EAAKf,QACL,EAAKA,OAAOe,EAAUT,KAIL5B,KAAKuB,WAAYvB,KAAKwB,cAE1CxB,KAAKwB,SACVxB,KAAKwB,WAIbhB,EAAWiB,UAAUa,SAAW,SAASC,GAAO,IAAD,OAC3C,GAAIA,EAAM,CACN,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,kBAAM,EAAKhB,QAAQc,EAAOG,OAAQJ,EAAKpE,OACvDqE,EAAOI,cAAcL,KAId/B,QCpDMqC,G,wDACjB,aAAc,IAAD,8BACT,gBAmCJC,eAAiB,SAACT,EAAUT,GACxB,IAAMmB,EAAW,IAAIC,IAA4B,CAAElD,MAAO,SAAUmD,aAAa,IAC3EC,EAAO,IAAIF,IAAYX,EAAUU,GACvCG,EAAK/E,KAAOyD,EACZ,EAAKuB,MAAMC,IAAIF,GACf,EAAKG,QAAQnE,QAAQJ,eAAeoE,IAzC3B,EA4CbI,uBAAyB,SAACrF,GACtB,IAAMsF,EAAS,EAAKJ,MAAMK,oBAAoB,OAAQvF,GAClDsF,IACAA,EAAOlB,SAASoB,UAChBF,EAAOR,SAASU,UAChB,EAAKN,MAAMO,OAAQH,KAjDd,EAqDbI,eAAiB,WACb,IAAIC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YACpB,EAAKC,OAAOC,OAASN,EAAQG,EAC7B,EAAKE,OAAOE,yBACZ,EAAKC,SAASC,QAAST,EAAOG,IA1DrB,EA6DbO,QAAU,WACNC,sBAAuB,EAAKD,SAC5B,EAAKE,YA/DI,EAkEbA,SAAW,WACP,EAAKJ,SAASxE,OAAQ,EAAKuD,MAAO,EAAKc,SAnE9B,EAsEbQ,wBAA0B,SAACC,GACvB,IAAInC,EAAOmC,EAAMC,OAAOC,MAAM,GAC9B,EAAKC,WAAWvC,SAASC,IAxEhB,EA2Eb3C,OAAS,WAAa,IAAD,OACjB,OACI,sBAAK7B,UAAU,SAAf,UACI,cAAC,EAAD,CACImC,IAAKF,KAAKqD,QACV3D,eAAgBM,KAAKyE,wBACrB5F,cAAemB,KAAKsD,yBAExB,qBAAKvF,UAAU,qBAAqBmC,IAAK,SAAC4E,GAAY,EAAKA,MAAQA,SAjF3E,EAAKzB,QAAUjD,IAAMC,YAFZ,E,gEAOTL,KAAKoE,SAAW,IAAIpB,IAAoB,CAAC+B,OAAM,IAC/C/E,KAAKoE,SAASY,cAAenB,OAAOoB,kBACpCjF,KAAK8E,MAAMI,YAAYlF,KAAKoE,SAASe,YAErCnF,KAAKiE,OAAS,IAAIjB,IAAwB,GAAIa,OAAOC,WAAaD,OAAOG,YAAa,GAAK,KAC3FhE,KAAKiE,OAAOmB,SAASC,IAAK,EAAG,EAAG,GAEhCrF,KAAKsF,cAAgB,IAAIC,IAAevF,KAAKiE,OAAQjE,KAAKoE,SAASe,YAEnE,IAAIK,EAAS,IAAIxC,IAAuB,SAAU,GAClDwC,EAAOJ,SAASC,IAAa,EAE7BrF,KAAKmD,MAAQ,IAAIH,IACjBhD,KAAKmD,MAAMC,IAAKpD,KAAKiE,QACrBjE,KAAKmD,MAAMC,IAAK,IAAIJ,IAAoB,UACxChD,KAAKmD,MAAMC,IAAIoC,GAEf,IAAMX,EAAa,IAAIrE,EACvBqE,EAAWrD,QAAU,kBAAMiE,QAAQC,IAAI,UACvCb,EAAWtD,WAAa,SAACmD,GAAD,OAAWe,QAAQC,IAAOhB,EAAMiB,OAASjB,EAAMkB,MAAQ,IAAQ,aACvFf,EAAWvD,OAAStB,KAAK8C,eACzB9C,KAAK6E,WAAaA,EAElBhB,OAAOgC,iBAAkB,SAAU7F,KAAK2D,gBAAgB,GAExD3D,KAAK2D,iBACL3D,KAAKsE,c,GAlCuBlE,IAAME,YCK1CwF,IAASlG,OACP,cAAC,IAAMmG,WAAP,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,SAIJzG,SAAS0G,eAAe,SAM1BjJ,M","file":"static/js/main.370ef2e0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n    Collapse,\n    Navbar as ReactNavbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n} from 'reactstrap';\n\nimport './navbar.css';\n\nconst Navbar = function() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);  \n\n    return (\n        <div>\n            <ReactNavbar expand=\"md\">\n                <Link to=\"/\">\n                    <NavbarBrand>Cloud3D</NavbarBrand>\n                </Link>\n            </ReactNavbar>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './sidebar.css';\n\nconst SceneListItem = function (props) {\n    return (\n        <option className=\"sceneListItem\" value={props.uuid} onSelect={props.onSelect}>\n            {props.name}\n        </option>\n    )\n}\n\nexport default class SideBar extends React.Component {\n    constructor() {\n        super()\n        this.sceneList = React.createRef();\n        this.state = {\n            sceneItems: []\n        }\n    }\n\n    removeFromSceneList = (uuid) => {\n        var sceneItems = [...this.state.sceneItems];\n        var index = sceneItems.findIndex((item) => item.uuid === uuid)\n        if (index !== -1) {\n            sceneItems.splice(index, 1);\n            this.setState({sceneItems: sceneItems});\n            this.props.onItemRemoved(uuid);\n        }\n    }\n\n    addToSceneList = (item) => {\n        this.setState(prevState => ({sceneItems: [...prevState.sceneItems, item]}))\n    }\n\n    onDeleteButtonClicked = () => {\n        if (this.sceneList.current && this.sceneList.current.selectedOptions) {\n            for (let item of this.sceneList.current.selectedOptions) {\n                this.removeFromSceneList(item.value);\n            }\n        }\n    }\n\n    onUploadButtonClicked = () => {\n        var input = document.createElement('input');\n        input.type = 'file';\n        input.onchange = this.props.onFileSelected;\n        input.click();\n    }\n\n    render = function () {\n        return (\n            <div className=\"sidebar\">\n                <Button color=\"primary\" onClick={this.onUploadButtonClicked}>+</Button>\n                <Button color=\"danger\" onClick={this.onDeleteButtonClicked}>-</Button>\n\n                <form>\n                    <select multiple=\"multiple\" ref={this.sceneList}> {\n                        this.state.sceneItems.map(item => {\n                            return <SceneListItem {...item} />\n                        })\n                    }\n                    </select>\n                </form>\n            </div>\n        )\n    }   \n}","import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nconst SupportedFileTypes = {\n    \"drc\": 0, \n    \"ply\": 1, \n    \"stl\": 2\n};\n\nconst GetFileTypeFromName = function(filename) {\n    var type = filename.substring(filename.lastIndexOf('.')+1, filename.length) || filename;\n    return SupportedFileTypes[type];\n}\n\nconst MeshLoader = function() {\n    this.loaders = {};\n\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderConfig( {type:\"wasm\"} )\n    dracoLoader.setDecoderPath( 'https://www.gstatic.com/draco/versioned/decoders/1.4.1/' );\n    dracoLoader.preload();\n    this.loaders[SupportedFileTypes.drc] = dracoLoader;\n\n    const plyLoader = new PLYLoader();\n    this.loaders[SupportedFileTypes.ply] = plyLoader;\n\n    const stlLoader = new STLLoader();\n    this.loaders[SupportedFileTypes.stl] = stlLoader;\n\n    this.onLoad = null;\n    this.onProgress = null;\n    this.onError = null;\n}\n\nMeshLoader.prototype.LoadURL = function(url, fileName) {\n    var fileType = GetFileTypeFromName(fileName);\n    var loader = this.loaders[fileType];\n    if (loader) {\n        var onLoad = (geometry) => {\n            if (this.onLoad) {\n                this.onLoad(geometry, fileName);\n            }\n        }\n\n        loader.load(url, onLoad, this.onProgress, this.onError);\n    }\n    else if (this.onError) {\n        this.onError();\n    }\n}\n\nMeshLoader.prototype.LoadFile = function(file) {\n    if (file) {\n        var reader = new FileReader();\n        reader.onload = () => this.LoadURL(reader.result, file.name);\n        reader.readAsDataURL(file);\n    }\n}\n\nexport default MeshLoader;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport SideBar from './sidebar.js';\nimport MeshLoader from '../../utils/meshLoader.js';\nimport './viewer.css';\n\nexport default class Viewer extends React.Component {\n    constructor(){\n        super()\n        this.sideBar = React.createRef();\n    }\n\n    componentDidMount() {\n\n        this.renderer = new THREE.WebGLRenderer({alpha:true});\n        this.renderer.setPixelRatio( window.devicePixelRatio );\n        this.mount.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n        this.camera.position.set( 0, 0, 5 );\n\n        this.orbitControls = new OrbitControls( this.camera, this.renderer.domElement );\n\n        var dLight = new THREE.DirectionalLight(0xffffff, 1);\n        dLight.position.set = (0, 0, 5);\n\n        this.scene = new THREE.Scene();\n        this.scene.add( this.camera );\n        this.scene.add( new THREE.AmbientLight( 0x333333 ) );\n        this.scene.add(dLight);\n\n        const meshLoader = new MeshLoader();\n        meshLoader.onError = () => console.log(\"error\");\n        meshLoader.onProgress = (event) => console.log( ( event.loaded / event.total * 100 ) + '% loaded' );\n        meshLoader.onLoad = this.addMeshToScene;\n        this.meshLoader = meshLoader;\n\n        window.addEventListener( 'resize', this.onWindowResize, false );\n\n        this.onWindowResize();\n        this.animate();\n    }\n\n    addMeshToScene = (geometry, fileName) => {\n        const material = new THREE.MeshStandardMaterial( { color: 0xaaaaaa, flatShading: true } );\n        const mesh = new THREE.Mesh( geometry, material );\n        mesh.name = fileName;\n        this.scene.add(mesh);\n        this.sideBar.current.addToSceneList(mesh);\n    }\n\n    removeElementFromScene = (uuid) => {\n        const object = this.scene.getObjectByProperty(\"uuid\", uuid);\n        if (object) {\n            object.geometry.dispose();\n            object.material.dispose();\n            this.scene.remove( object );    \n        }\n    }\n\n    onWindowResize = () => {\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize( width, height );\n    }\n\n    animate = () => {\n        requestAnimationFrame( this.animate );\n        this.render3D();\n    }\n\n    render3D = () => {\n        this.renderer.render( this.scene, this.camera );\n    }\n\n    onFileSelectedForUpload = (event) => {\n        let file = event.target.files[0];\n        this.meshLoader.LoadFile(file);\n    }\n\n    render = function () {\n        return (\n            <div className=\"viewer\">\n                <SideBar \n                    ref={this.sideBar}\n                    onFileSelected={this.onFileSelectedForUpload}\n                    onItemRemoved={this.removeElementFromScene}\n                />\n                <div className=\"window-3d noselect\" ref={(mount) => { this.mount = mount }} />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Navbar from './components/navbar/navbar.js';\nimport Viewer from './components/viewer/viewer.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Navbar />\n      <Viewer />\n    </Router>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}