{"version":3,"sources":["reportWebVitals.js","components/navbar/navbar.js","config.js","components/viewer/sidebar/sidebar.js","components/viewer/lib/meshLoader.js","components/viewer/lib/sceneControls.js","components/viewer/lib/scene.js","components/viewer/viewer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","expand","NavbarBrand","SUPPORTED_MESH_TYPES","MESH_DEFAULT_COLOR","SceneListItem","props","className","value","uuid","name","SideBar","removeObjectsFromScene","uuidsToRemove","sceneObjects","state","index","findIndex","object","splice","setState","onItemsRemoved","addToSceneList","item","prevState","onSelectionChanged","event","onDeleteButtonClicked","sceneList","current","selectedOptions","objectsToRemove","push","onUploadButtonClicked","input","document","createElement","type","onchange","onFileSelected","click","render","Button","color","onClick","this","multiple","ref","onChange","map","React","createRef","Component","GetFileTypeFromName","filename","substring","lastIndexOf","length","ReadFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","MeshLoader","loaders","dracoLoader","DRACOLoader","setDecoderConfig","setDecoderPath","preload","drc","plyLoader","PLYLoader","ply","stlLoader","STLLoader","stl","gltfLoader","GLTFLoader","setDRACOLoader","onLoad","onProgress","onError","prototype","Load","loader","url","load","geometry","LoadURL","fileName","a","fileType","LoadFile","data","SceneControls","OrbitControls","SceneEvent","Scene","rootElement","preventDefault","mouse","THREE","rect","renderer","domElement","getBoundingClientRect","x","clientX","left","right","y","clientY","top","bottom","raycaster","setFromCamera","camera","intersects","intersectObjects","meshRoot","children","selection","dispatchEvent","removeObjectsByUUID","scene","getObjectByProperty","dispose","material","remove","setColorOfObjects","uuids","setHex","animate","requestAnimationFrame","alpha","setPixelRatio","window","devicePixelRatio","appendChild","innerWidth","innerHeight","position","set","controls","dLight","add","addEventListener","resize","clientWidth","clientHeight","width","height","aspect","updateProjectionMatrix","setSize","STATUS_TYPE","Viewer","addMeshToScene","console","log","flatShading","mesh","sideBar","visibleObjects","status","message","onLoadError","error","onLoadProgress","loaded","total","onObjectsRemoved","setObjectsSelected","newSelection","prevSelection","selectedObjects","uuidsToSelect","uuidsToDeselect","includes","currentSelection","target","onWindowResize","mount","onFileSelectedForUpload","files","meshLoader","src","process","alt","e","ReactDOM","StrictMode","id","getElementById"],"mappings":"0OAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gBCWCQ,G,MAVA,WACX,OACI,8BACI,cAAC,IAAD,CAAaC,OAAO,KAApB,SACI,cAACC,EAAA,EAAD,4B,mDCXHC,EAAuB,CAChC,IAAO,EACP,IAAO,EACP,IAAO,EACP,KAAQ,GAGCC,EAAqB,S,gBCJ5BC,G,MAAgB,SAAUC,GAC5B,OACI,wBAAQC,UAAU,gBAAgBC,MAAOF,EAAMG,KAA/C,SACKH,EAAMI,SAKEC,E,kDACjB,aAAe,IAAD,8BACV,gBAOJC,uBAAyB,SAACC,GACtB,IADwC,EACpCC,EAAY,YAAO,EAAKC,MAAMD,cADM,cAGvBD,GAHuB,yBAG/BJ,EAH+B,SAKrB,KADXO,EAAQF,EAAaG,WAAU,SAACC,GAAD,OAAYA,EAAOT,OAASA,OAE3DK,EAAaK,OAAOH,EAAO,IAHnC,2BAAgC,CAAC,IACzBA,EADwB,KAHQ,8BAUxC,EAAKI,SAAS,CAACN,aAAcA,IAEzB,EAAKR,MAAMe,gBACX,EAAKf,MAAMe,eAAeR,IArBpB,EAyBdS,eAAiB,SAACC,GACd,EAAKH,UAAS,SAAAI,GAAS,MAAK,CAACV,aAAa,GAAD,mBAAMU,EAAUV,cAAhB,CAA8BS,SA1B7D,EA6BdE,mBAAqB,SAACC,GACd,EAAKpB,MAAMmB,oBACX,EAAKnB,MAAMmB,mBAAmBC,IA/BxB,EAmCdC,sBAAwB,WACpB,GAAI,EAAKC,UAAUC,SAAW,EAAKD,UAAUC,QAAQC,gBAAiB,CAClE,IADkE,EAC9DC,EAAkB,GAD4C,cAE/C,EAAKH,UAAUC,QAAQC,iBAFwB,IAElE,2BAA2D,CAAC,IAAnDZ,EAAkD,QACvDa,EAAgBC,KAAKd,EAAOV,QAHkC,8BAMlE,EAAKI,uBAAuBmB,KA1CtB,EA8CdE,sBAAwB,WACpB,IAAIC,EAAQC,SAASC,cAAc,SACnCF,EAAMG,KAAO,OACbH,EAAMI,SAAW,EAAKhC,MAAMiC,eAC5BL,EAAMM,SAlDI,EAqDdC,OAAS,WACL,OACI,sBAAKlC,UAAU,UAAf,UACI,cAACmC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASC,KAAKZ,sBAAtC,eACA,cAACS,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASC,KAAKlB,sBAArC,eAEA,+BACI,yBAAQmB,SAAS,WAAWC,IAAKF,KAAKjB,UAAWoB,SAAUH,KAAKpB,mBAAhE,cACIoB,KAAK9B,MAAMD,aAAamC,KAAI,SAAA/B,GACxB,OAAO,cAAC,EAAD,eAAqCA,GAAjBA,EAAOT,kBA5DtD,EAAKmB,UAAYsB,IAAMC,YACvB,EAAKpC,MAAQ,CACTD,aAAc,IAJR,E,UADmBoC,IAAME,W,yDCHrCC,EAAsB,SAASC,GACjC,IAAIjB,EAAOiB,EAASC,UAAUD,EAASE,YAAY,KAAO,EAAGF,EAASG,SAAWH,EACjF,OAAOnD,EAAqBkC,IAG1BqB,EAAgB,SAASC,GAC3B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,kBAAMJ,EAAQE,EAAOG,SACrCH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OAIvBU,EAAa,WACfxB,KAAKyB,QAAU,GAEf,IAAMC,EAAc,IAAIC,IACxBD,EAAYE,iBAAkB,CAACpC,KAAK,SACpCkC,EAAYG,eArBW,2DAsBvBH,EAAYI,UACZ9B,KAAKyB,QAAQnE,EAAqByE,KAAOL,EAEzC,IAAMM,EAAY,IAAIC,IACtBjC,KAAKyB,QAAQnE,EAAqB4E,KAAOF,EAEzC,IAAMG,EAAY,IAAIC,IACtBpC,KAAKyB,QAAQnE,EAAqB+E,KAAOF,EAEzC,IAAMG,EAAa,IAAIC,IACvBD,EAAWE,eAAed,GAC1B1B,KAAKyB,QAAQ,GAAKa,EAElBtC,KAAKyC,OAAS,KACdzC,KAAK0C,WAAa,KAClB1C,KAAK2C,QAAU,MAGnBnB,EAAWoB,UAAUC,KAAO,SAASC,EAAQC,GAAM,IAAD,OAC9C,OAAO,IAAIhC,SAAQ,SAACC,EAASC,GAEzB6B,EAAOE,KAAKD,GADC,SAACE,GAAD,OAAcjC,EAAQiC,KACV,EAAKP,WAAYzB,OAIlDO,EAAWoB,UAAUM,QAArB,uCAA+B,WAAeH,EAAKI,GAApB,mBAAAC,EAAA,yDACvBC,EAAW7C,EAAoB2C,GAAYJ,KAC3CD,EAAS9C,KAAKyB,QAAQ4B,IAFC,0CAKErD,KAAK6C,KAAKC,EAAQC,GALpB,QAKfE,EALe,SAOfjD,KAAKyC,OAAOQ,EAAUE,GAPP,kDAWnBnD,KAAK2C,QAAL,MAXmB,gCAclB3C,KAAK2C,SACV3C,KAAK2C,QAAQ,kCAfU,0DAA/B,wDAmBAnB,EAAWoB,UAAUU,SAArB,uCAAgC,WAAexC,GAAf,eAAAsC,EAAA,0DACxBtC,EADwB,0CAGHD,EAAcC,GAHX,OAGhByC,EAHgB,OAIpBvD,KAAKkD,QAAQK,EAAMzC,EAAKjD,MAJJ,gDAMpBmC,KAAK2C,QAAL,MANoB,yDAAhC,sDAWenB,QClFMgC,E,kIAAsBC,GCE9BC,EACY,mBAGZC,EAAb,kDACI,WAAYC,GAAc,IAAD,uBACrB,gBA2BJ7D,QAAU,SAAClB,GACPA,EAAMgF,iBAEN,IAAIC,EAAQ,IAAIC,KACZC,EAAO,EAAKC,SAASC,WAAWC,wBACpCL,EAAMM,GAAOvF,EAAMwF,QAAUL,EAAKM,OAASN,EAAKO,MAAQP,EAAKM,MAAU,EAAI,EAC3ER,EAAMU,IAAS3F,EAAM4F,QAAUT,EAAKU,MAAUV,EAAKW,OAASX,EAAKU,KAAS,EAAI,EAE9E,IAAIE,EAAa,IAAIb,KACrBa,EAAUC,cAAef,EAAO,EAAKgB,QACrC,IAAIC,EAAaH,EAAUI,iBAAkB,EAAKC,SAASC,UAEvDC,EAAYJ,EAAWnE,OAAS,EAAI,CAACmE,EAAW,GAAG1G,OAAOT,MAAQ,GACtE,EAAKwH,cAAc,CACf5F,KAAMkE,EACNyB,UAAWA,KA3CM,EA+CzBE,oBAAsB,SAACrH,GAAmB,IAAD,gBACpBA,GADoB,IACrC,2BAAgC,CAAC,IAAxBJ,EAAuB,QACtBS,EAAS,EAAKiH,MAAMC,oBAAoB,OAAQ3H,GAClDS,IACAA,EAAO4E,SAASuC,UAChBnH,EAAOoH,SAASD,UAChB,EAAKP,SAASS,OAAQrH,KANO,gCA/ChB,EA0DzBsH,kBAAoB,SAACC,EAAO9F,GAAW,IAAD,gBACjB8F,GADiB,IAClC,2BAAwB,CAAC,IAAhBhI,EAAe,QACdS,EAAS,EAAKiH,MAAMC,oBAAoB,OAAQ3H,GAClDS,GAAUA,EAAOoH,UACjBpH,EAAOoH,SAAS3F,MAAM+F,OAAO/F,IAJH,gCA1Db,EAyEzBgG,QAAU,WACN,EAAKlG,SACLmG,sBAAuB,EAAKD,UAxE5B,EAAK7B,SAAW,IAAIF,KAAoB,CAACiC,OAAM,IAC/C,EAAK/B,SAASgC,cAAeC,OAAOC,kBACpCvC,EAAYwC,YAAY,EAAKnC,SAASC,YAEtC,EAAKY,OAAS,IAAIf,IAAwB,GAAImC,OAAOG,WAAaH,OAAOI,YAAa,KAAO,KAC7F,EAAKxB,OAAOyB,SAASC,IAAK,EAAG,EAAG,GAEhC,EAAKC,SAAW,IAAIjD,EAAe,EAAKsB,OAAQ,EAAKb,SAASC,YAE9D,IAAIwC,EAAS,IAAI3C,IAAuB,SAAU,GAZ7B,OAarB2C,EAAOH,SAASC,IAAM,EAAK1B,OAAOyB,SAClC,EAAKzB,OAAO6B,IAAID,GAEhB,EAAKzB,SAAW,IAAIlB,IAAoB,SAExC,EAAKuB,MAAQ,IAAIvB,KACjB,EAAKuB,MAAMqB,IAAK,EAAK7B,QACrB,EAAKQ,MAAMqB,IAAK,EAAK1B,UAErB,EAAKhB,SAASC,WAAW0C,iBAAkB,QAAS,EAAK7G,SAAS,GAElE,EAAK8G,OAAO,EAAK5C,SAASC,WAAW4C,YAAa,EAAK7C,SAASC,WAAW6C,cAC3E,EAAKjB,UAzBgB,EAD7B,mDAoEWkB,EAAOC,GACVjH,KAAK8E,OAAOoC,OAASF,EAAQC,EAC7BjH,KAAK8E,OAAOqC,yBACZnH,KAAKiE,SAASmD,QAASJ,EAAOC,KAvEtC,+BAgFQjH,KAAKiE,SAASrE,OAAQI,KAAKsF,MAAOtF,KAAK8E,YAhF/C,GAA2Bf,KCCrBsD,G,MACM,GADNA,EAES,EAFTA,EAGO,EAGQC,E,kDACjB,aAAc,IAAD,8BACT,gBAsBJC,eAAiB,SAACtE,EAAUE,GACxBqE,QAAQC,IAAItE,EAAW,YACvB,IAAMsC,EAAW,IAAI1B,IAA4B,CAAEjE,MAAOvC,EAAoBmK,aAAa,IACrFC,EAAO,IAAI5D,IAAYd,EAAUwC,GACvCkC,EAAK9J,KAAOsF,EACZ,EAAKmC,MAAML,SAAS0B,IAAIgB,GACxB,EAAKC,QAAQ5I,QAAQP,eAAekJ,GACpC,EAAKpJ,UAAS,SAAAI,GAAS,MAAK,CACxBkJ,eAAe,GAAD,mBAAMlJ,EAAUkJ,gBAAhB,CAAgCF,IAC9CG,OAAQ,CACJtI,KAAM6H,EACNU,QAAS,WAAa5E,QAlCrB,EAuCb6E,YAAc,SAACC,GACXT,QAAQC,IAAIQ,GACZ,EAAK1J,SAAS,CACVuJ,OAAQ,CACJtI,KAAM6H,EACNU,QAAS,2BA5CR,EAiDbG,eAAiB,SAACrJ,GACd2I,QAAQC,IAAO5I,EAAMsJ,OAAStJ,EAAMuJ,MAAQ,IAAQ,aAlD3C,EAqDbC,iBAAmB,SAACzC,GAChB,EAAKN,MAAMD,oBAAoBO,IAtDtB,EAyDb0C,mBAAqB,SAACC,GAClB,IADmC,EAC/BC,EAAa,YAAO,EAAKtK,MAAMuK,iBAC/BC,EAAgB,GAChBC,EAAkB,GAHa,cAKbJ,GALa,IAKnC,2BAAoC,CAAC,IAA5BpD,EAA2B,QAC3BqD,EAAcI,SAASzD,IACxBuD,EAAcvJ,KAAKgG,IAPQ,kDAWbqD,GAXa,IAWnC,2BAAqC,CAAC,IAA7BrD,EAA4B,QAC5BoD,EAAaK,SAASzD,IACvBwD,EAAgBxJ,KAAKgG,IAbM,8BAiBnC,EAAK5G,SAAS,CACVkK,gBAAiBF,IAGrB,EAAKjD,MAAMK,kBAAkBgD,EAAiBpL,GAC9C,EAAK+H,MAAMK,kBAAkB+C,ELtFD,WKOnB,EAkFb9J,mBAAqB,SAACC,GAClB,IAD4B,EACxBgK,EAAmB,GADK,cAENhK,EAAMiK,OAAO7J,iBAFP,IAE5B,2BAAoD,CAAC,IAA5CkG,EAA2C,QAC5CA,GACA0D,EAAiB1J,KAAKgG,EAAUxH,QAJZ,8BAO5B,EAAK2K,mBAAmBO,IAzFf,EA4FbE,eAAiB,WACb,GAAI,EAAKC,MAAO,CACZ,IAAIhC,EAAQ,EAAKgC,MAAMlC,YACnBG,EAAS,EAAK+B,MAAMjC,aACxB,EAAKzB,MAAMuB,OAAOG,EAAOC,KAhGpB,EAoGbgC,wBAA0B,SAACpK,GACvB,IAAIiC,EAAOjC,EAAMiK,OAAOI,MAAM,GAC9B,EAAKC,WAAW7F,SAASxC,GACzB,EAAKvC,SAAS,CACVuJ,OAAQ,CACJtI,KAAM6H,EACNU,QAAS,iBA1GR,EA+GbnI,OAAS,WAAa,IAAD,SACjB,OACI,sBAAKlC,UAAU,SAAf,UACI,cAAC,EAAD,CACIwC,IAAKF,KAAK4H,QACVlI,eAAgBM,KAAKiJ,wBACrBzK,eAAgBwB,KAAKqI,iBACrBzJ,mBAAoBoB,KAAKpB,qBAE7B,qBAAKlB,UAAU,qBAAqBwC,IAAK,SAAC8I,GAAY,EAAKA,MAAQA,GAAnE,UACM,UAAAhJ,KAAK9B,MAAM4J,cAAX,eAAmBC,UACjB,sBAAKrK,UAAU,SAAf,UAEKsC,KAAK9B,MAAM4J,OAAOtI,OAAS6H,GACxB,qBAAK+B,IAAKC,6BAA0CC,IAAI,IAAItC,MAAM,SAGrEhH,KAAK9B,MAAM4J,OAAOtI,OAAS6H,GACxB,qBAAK+B,IAAKC,2BAAwCC,IAAI,IAAItC,MAAM,SAGpE,+BAAOhH,KAAK9B,MAAM4J,OAAOC,mBAlI7C,EAAKH,QAAUvH,IAAMC,YACrB,EAAKpC,MAAQ,CACT4J,OAAQ,KACRW,gBAAiB,GACjBZ,eAAgB,IANX,E,gEAUQ,IAAD,OAChB7H,KAAKsF,MAAQ,IAAI3B,EAAM3D,KAAKgJ,OAC5BhJ,KAAKsF,MAAMsB,iBAAiB,oBAAoB,SAAC2C,GAAD,OAAO,EAAKjB,mBAAmBiB,EAAEpE,cAEjF,IAAMgE,EAAa,IAAI3H,EACvB2H,EAAWxG,QAAU3C,KAAKgI,YAC1BmB,EAAWzG,WAAa1C,KAAKkI,eAC7BiB,EAAW1G,OAASzC,KAAKuH,eACzBvH,KAAKmJ,WAAaA,EAElBjD,OAAOU,iBAAkB,SAAU5G,KAAK+I,gBAAgB,O,GArB5B1I,IAAME,WCP1CiJ,IAAS5J,OACP,eAAC,IAAM6J,WAAP,WAEI,cAAC,EAAD,IACA,qBAAKC,GAAG,UAAR,SACE,cAAC,EAAD,SAINpK,SAASqK,eAAe,SAM1BjN,M","file":"static/js/main.40b0118e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {\n    Navbar as ReactNavbar,\n    NavbarBrand,\n} from 'reactstrap';\n\nimport './navbar.css';\n\nconst Navbar = function() {\n    return (\n        <div>\n            <ReactNavbar expand=\"md\">\n                <NavbarBrand>Cloud3D</NavbarBrand>\n            </ReactNavbar>\n        </div>\n    )\n}\n\nexport default Navbar;","\r\nexport const SUPPORTED_MESH_TYPES = {\r\n    \"drc\": 0, \r\n    \"ply\": 1, \r\n    \"stl\": 2,\r\n    \"gltf\": 3\r\n};\r\n\r\nexport const MESH_DEFAULT_COLOR = 0xaaaaaa;\r\nexport const MESH_HIGHLIGHT_COLOR = 0xfff700;","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './sidebar.css';\n\nconst SceneListItem = function (props) {\n    return (\n        <option className=\"sceneListItem\" value={props.uuid}>\n            {props.name}\n        </option>\n    )\n}\n\nexport default class SideBar extends React.Component {\n    constructor() {\n        super()\n        this.sceneList = React.createRef();\n        this.state = {\n            sceneObjects: []\n        }\n    }\n\n    removeObjectsFromScene = (uuidsToRemove) => {\n        var sceneObjects = [...this.state.sceneObjects];\n\n        for (let uuid of uuidsToRemove) {\n            var index = sceneObjects.findIndex((object) => object.uuid === uuid)\n            if (index !== -1) {\n                sceneObjects.splice(index, 1);\n            }\n        }\n\n        this.setState({sceneObjects: sceneObjects});\n\n        if (this.props.onItemsRemoved) {\n            this.props.onItemsRemoved(uuidsToRemove);\n        }\n    }\n\n    addToSceneList = (item) => {\n        this.setState(prevState => ({sceneObjects: [...prevState.sceneObjects, item]}))\n    }\n\n    onSelectionChanged = (event) => {\n        if (this.props.onSelectionChanged) {\n            this.props.onSelectionChanged(event);\n        }\n    }\n\n    onDeleteButtonClicked = () => {\n        if (this.sceneList.current && this.sceneList.current.selectedOptions) {\n            var objectsToRemove = [];\n            for (let object of this.sceneList.current.selectedOptions) {\n                objectsToRemove.push(object.value);\n            }\n\n            this.removeObjectsFromScene(objectsToRemove);\n        }\n    }\n\n    onUploadButtonClicked = () => {\n        var input = document.createElement('input');\n        input.type = 'file';\n        input.onchange = this.props.onFileSelected;\n        input.click();\n    }\n\n    render = function () {\n        return (\n            <div className=\"sidebar\">\n                <Button color=\"primary\" onClick={this.onUploadButtonClicked}>+</Button>\n                <Button color=\"danger\" onClick={this.onDeleteButtonClicked}>-</Button>\n\n                <form>\n                    <select multiple=\"multiple\" ref={this.sceneList} onChange={this.onSelectionChanged}> {\n                        this.state.sceneObjects.map(object => {\n                            return <SceneListItem key={object.uuid} {...object} />\n                        })\n                    }\n                    </select>\n                </form>\n            </div>\n        )\n    }   \n}","import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport { SUPPORTED_MESH_TYPES } from '../../../config.js';\n\nconst DRACO_DECODER_PATH = \"https://www.gstatic.com/draco/versioned/decoders/1.4.1/\";\n\nconst GetFileTypeFromName = function(filename) {\n    var type = filename.substring(filename.lastIndexOf('.') + 1, filename.length) || filename;\n    return SUPPORTED_MESH_TYPES[type];\n}\n\nconst ReadFileAsync = function(file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n    })\n}\n  \nconst MeshLoader = function() {\n    this.loaders = {};\n\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderConfig( {type:\"wasm\"} )\n    dracoLoader.setDecoderPath( DRACO_DECODER_PATH );\n    dracoLoader.preload();\n    this.loaders[SUPPORTED_MESH_TYPES.drc] = dracoLoader;\n\n    const plyLoader = new PLYLoader();\n    this.loaders[SUPPORTED_MESH_TYPES.ply] = plyLoader;\n\n    const stlLoader = new STLLoader();\n    this.loaders[SUPPORTED_MESH_TYPES.stl] = stlLoader;\n\n    const gltfLoader = new GLTFLoader();\n    gltfLoader.setDRACOLoader(dracoLoader);\n    this.loaders[3] = gltfLoader;\n\n    this.onLoad = null;\n    this.onProgress = null;\n    this.onError = null;\n}\n\nMeshLoader.prototype.Load = function(loader, url) {\n    return new Promise((resolve, reject) => {\n        var onLoad = (geometry) => resolve(geometry);\n        loader.load(url, onLoad, this.onProgress, reject);        \n    })\n}\n\nMeshLoader.prototype.LoadURL = async function(url, fileName) {\n    var fileType = GetFileTypeFromName(fileName || url);\n    var loader = this.loaders[fileType];\n    if (loader) {\n        try {\n            let geometry = await this.Load(loader, url);\n            if (geometry) {\n                this.onLoad(geometry, fileName);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    else if (this.onError) {\n        this.onError(\"No loaders found for this file\");\n    }\n}\n\nMeshLoader.prototype.LoadFile = async function(file) {\n    if (file) {\n        try {\n            let data = await ReadFileAsync(file);\n            this.LoadURL(data, file.name);\n        } catch(err) {\n            this.onError(err);\n        }\n    }\n}\n\nexport default MeshLoader;","import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nexport default class SceneControls extends OrbitControls {\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport SceneControls from './sceneControls.js';\r\n\r\nexport const SceneEvent = {\r\n    \"selectionChanged\" : \"selectionChanged\",\r\n}\r\n\r\nexport class Scene extends THREE.EventDispatcher {\r\n    constructor(rootElement) {\r\n        super();\r\n\r\n        this.renderer = new THREE.WebGLRenderer({alpha:true});\r\n        this.renderer.setPixelRatio( window.devicePixelRatio );\r\n        rootElement.appendChild(this.renderer.domElement);\r\n\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.001, 5000);\r\n        this.camera.position.set( 0, 0, 5 );\r\n\r\n        this.controls = new SceneControls( this.camera, this.renderer.domElement );\r\n\r\n        var dLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        dLight.position.set = this.camera.position;\r\n        this.camera.add(dLight);\r\n\r\n        this.meshRoot = new THREE.AmbientLight( 0x333333 );\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.scene.add( this.camera );\r\n        this.scene.add( this.meshRoot );\r\n\r\n        this.renderer.domElement.addEventListener( 'click', this.onClick, false );\r\n\r\n        this.resize(this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight);\r\n        this.animate();\r\n    }\r\n\r\n    onClick = (event) => {\r\n        event.preventDefault();\r\n\r\n        var mouse = new THREE.Vector2();\r\n        var rect = this.renderer.domElement.getBoundingClientRect();\r\n        mouse.x = ( (event.clientX - rect.left) / (rect.right - rect.left) ) * 2 - 1;\r\n        mouse.y = -( ( event.clientY - rect.top ) / ( rect.bottom - rect.top) ) * 2 + 1;\r\n\r\n        var raycaster =  new THREE.Raycaster();                                        \r\n        raycaster.setFromCamera( mouse, this.camera );\r\n        var intersects = raycaster.intersectObjects( this.meshRoot.children );\r\n\r\n        var selection = intersects.length > 0 ? [intersects[0].object.uuid] : [];\r\n        this.dispatchEvent({\r\n            type: SceneEvent.selectionChanged,\r\n            selection: selection\r\n        });\r\n    }\r\n\r\n    removeObjectsByUUID = (uuidsToRemove) => {\r\n        for (let uuid of uuidsToRemove) {\r\n            const object = this.scene.getObjectByProperty(\"uuid\", uuid);\r\n            if (object) {\r\n                object.geometry.dispose();\r\n                object.material.dispose();\r\n                this.meshRoot.remove( object );    \r\n            }\r\n        }\r\n    }\r\n\r\n    setColorOfObjects = (uuids, color) => {\r\n        for (let uuid of uuids) {\r\n            const object = this.scene.getObjectByProperty(\"uuid\", uuid);\r\n            if (object && object.material) {\r\n                object.material.color.setHex(color);\r\n            }        \r\n        }\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize( width, height );\r\n    }\r\n\r\n    animate = () => {\r\n        this.render();\r\n        requestAnimationFrame( this.animate );\r\n    }\r\n\r\n    render() {\r\n        this.renderer.render( this.scene, this.camera );\r\n    }\r\n}","import React from 'react';\nimport * as THREE from 'three';\n\nimport { MESH_DEFAULT_COLOR, MESH_HIGHLIGHT_COLOR } from '../../config.js';\nimport SideBar from './sidebar/sidebar.js';\nimport MeshLoader from './lib/meshLoader.js';\nimport { Scene } from './lib/scene.js';\nimport './viewer.css';\n\nconst STATUS_TYPE = {\n    \"Info\": 0,\n    \"Process\": 1,\n    \"Error\": 2\n}\n\nexport default class Viewer extends React.Component {\n    constructor(){\n        super()\n        this.sideBar = React.createRef();\n        this.state = {\n            status: null,\n            selectedObjects: [],\n            visibleObjects: []\n        };\n    }\n\n    componentDidMount() {\n        this.scene = new Scene(this.mount);\n        this.scene.addEventListener(\"selectionChanged\", (e) => this.setObjectsSelected(e.selection));\n\n        const meshLoader = new MeshLoader();\n        meshLoader.onError = this.onLoadError;\n        meshLoader.onProgress = this.onLoadProgress;\n        meshLoader.onLoad = this.addMeshToScene;\n        this.meshLoader = meshLoader;\n\n        window.addEventListener( 'resize', this.onWindowResize, false );\n    }\n\n    addMeshToScene = (geometry, fileName) => {\n        console.log(fileName + \" loaded!\");\n        const material = new THREE.MeshStandardMaterial( { color: MESH_DEFAULT_COLOR, flatShading: true } );\n        const mesh = new THREE.Mesh( geometry, material );\n        mesh.name = fileName;\n        this.scene.meshRoot.add(mesh);\n        this.sideBar.current.addToSceneList(mesh);\n        this.setState(prevState => ({\n            visibleObjects: [...prevState.visibleObjects, mesh],\n            status: {\n                type: STATUS_TYPE.Info,\n                message: \"Loaded: \" + fileName\n            }\n        }));\n    }\n\n    onLoadError = (error) => {\n        console.log(error);\n        this.setState({\n            status: {\n                type: STATUS_TYPE.Error,\n                message: \"An error occurred...\"\n            }\n        });\n    }\n\n    onLoadProgress = (event) => {\n        console.log( ( event.loaded / event.total * 100 ) + '% loaded' )\n    }\n\n    onObjectsRemoved = (uuids) => {\n        this.scene.removeObjectsByUUID(uuids);\n    }\n\n    setObjectsSelected = (newSelection) => {\n        var prevSelection = [...this.state.selectedObjects];\n        var uuidsToSelect = [];\n        var uuidsToDeselect = [];\n\n        for (let selection of newSelection) {\n            if (!prevSelection.includes(selection)) {\n                uuidsToSelect.push(selection);\n            }\n        }\n\n        for (let selection of prevSelection) {\n            if (!newSelection.includes(selection)) {\n                uuidsToDeselect.push(selection);\n            }\n        }\n\n        this.setState({\n            selectedObjects: newSelection\n        });\n\n        this.scene.setColorOfObjects(uuidsToDeselect, MESH_DEFAULT_COLOR);\n        this.scene.setColorOfObjects(uuidsToSelect, MESH_HIGHLIGHT_COLOR);\n    }\n\n    onSelectionChanged = (event) => {\n        var currentSelection = [];\n        for (let selection of event.target.selectedOptions) {\n            if (selection) {\n                currentSelection.push(selection.value);\n            }\n        }\n        this.setObjectsSelected(currentSelection);\n    }\n\n    onWindowResize = () => {\n        if (this.mount) {\n            let width = this.mount.clientWidth;\n            let height = this.mount.clientHeight;\n            this.scene.resize(width, height);\n        }\n    }\n\n    onFileSelectedForUpload = (event) => {\n        let file = event.target.files[0];\n        this.meshLoader.LoadFile(file);\n        this.setState({\n            status: {\n                type: STATUS_TYPE.Process,\n                message: \"Loading...\"\n            }\n        });\n    }\n\n    render = function () {\n        return (\n            <div className=\"viewer\">\n                <SideBar \n                    ref={this.sideBar}\n                    onFileSelected={this.onFileSelectedForUpload}\n                    onItemsRemoved={this.onObjectsRemoved}\n                    onSelectionChanged={this.onSelectionChanged}\n                />\n                <div className=\"window-3d noselect\" ref={(mount) => { this.mount = mount }}>\n                    { this.state.status?.message &&\n                        <div className=\"status\">\n\n                            {this.state.status.type === STATUS_TYPE.Process &&\n                                <img src={process.env.PUBLIC_URL  + \"/spinner.gif\"} alt=\"o\" width=\"40px\" />\n                            }\n\n                            {this.state.status.type === STATUS_TYPE.Error &&\n                                <img src={process.env.PUBLIC_URL  + \"/error.png\"} alt=\"o\" width=\"16px\" />\n                            }\n\n                            <span>{this.state.status.message}</span>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport Navbar from './components/navbar/navbar.js';\nimport Viewer from './components/viewer/viewer.js'\n\nReactDOM.render(\n  <React.StrictMode>\n\n      <Navbar />\n      <div id=\"content\">\n        <Viewer />\n      </div>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}