{"version":3,"sources":["reportWebVitals.js","components/navbar/navbar.js","config.js","components/viewer/sidebar/sidebar.js","components/viewer/lib/meshLoader.js","components/viewer/lib/sceneControls.js","components/viewer/lib/scene.js","components/viewer/viewer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","expand","NavbarBrand","SUPPORTED_MESH_TYPES","MESH_DEFAULT_COLOR","SceneListItem","props","className","selected","id","uuid","type","value","defaultChecked","visible","onChange","onVisibleChanged","name","onClick","onSelectionChanged","SideBar","event","target","onVisibilityToggled","checked","onDeleteButtonClicked","sceneList","current","selectElements","getElementsByClassName","objectsToRemove","element","push","onObjectsRemoved","onUploadButtonClicked","input","document","createElement","onchange","onFileSelected","click","render","Button","color","this","ref","Object","entries","sceneObjects","map","key","React","createRef","Component","GetFileTypeFromName","filename","substring","lastIndexOf","length","ReadFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","MeshLoader","loaders","dracoLoader","DRACOLoader","setDecoderConfig","setDecoderPath","preload","drc","plyLoader","PLYLoader","ply","stlLoader","STLLoader","stl","gltfLoader","GLTFLoader","setDRACOLoader","onLoad","onProgress","onError","prototype","Load","loader","url","load","geometry","LoadURL","fileName","a","fileType","LoadFile","data","SceneControls","camera","domElement","rotateSpeed","zoomSpeed","staticMoving","TrackballControls","SceneEvent","Scene","rootElement","preventDefault","mouse","THREE","rect","renderer","getBoundingClientRect","x","clientX","left","right","y","clientY","top","bottom","raycaster","setFromCamera","intersects","intersectObjects","meshRoot","children","selection","object","dispatchEvent","removeObjectsByUUID","uuidsToRemove","scene","getObjectByProperty","dispose","material","remove","setColorOfObjects","uuids","setHex","setVisibilityOfObjects","isVisible","animate","requestAnimationFrame","controls","update","alpha","setPixelRatio","window","devicePixelRatio","appendChild","innerWidth","innerHeight","position","set","dLight","add","addEventListener","resize","clientWidth","clientHeight","width","height","aspect","updateProjectionMatrix","setSize","handleResize","STATUS_TYPE","ObjectInfo","Viewer","addMeshToScene","console","log","flatShading","mesh","info","state","setState","status","message","onLoadError","error","onLoadProgress","loaded","total","setObjectsSelected","newSelection","uuidsToSelect","uuidsToDeselect","keys","forEach","includes","selectedObjects","setObjectsVisibility","onWindowResize","mount","onFileSelectedForUpload","files","meshLoader","sideBar","src","process","alt","e","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.acd68e4d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {\n    Navbar as ReactNavbar,\n    NavbarBrand,\n} from 'reactstrap';\n\nimport './navbar.css';\n\nconst Navbar = function() {\n    return (\n        <div>\n            <ReactNavbar expand=\"md\">\n                <NavbarBrand>Cloud3D</NavbarBrand>\n            </ReactNavbar>\n        </div>\n    )\n}\n\nexport default Navbar;","\r\nexport const SUPPORTED_MESH_TYPES = {\r\n    \"drc\": 0, \r\n    \"ply\": 1, \r\n    \"stl\": 2,\r\n    \"gltf\": 3\r\n};\r\n\r\nexport const MESH_DEFAULT_COLOR = 0xaaaaaa;\r\nexport const MESH_HIGHLIGHT_COLOR = 0xfff700;","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './sidebar.css';\nimport './sceneList.css';\n\nconst SceneListItem = function (props) {\n    return (\n        <li className={\"sceneListItem \" + (props.selected ? \"selected\" : \"\")} id={props.uuid}>\n            <div>\n                <label>\n                    <input \n                        type=\"checkbox\" \n                        className=\"visibiltyCheckbox\" \n                        value={props.uuid} \n                        defaultChecked={props.visible}\n                        onChange={props.onVisibleChanged}\n                    />\n                </label>\n            </div>\n            <div>\n                <span>{props.name}</span>\n                <label className=\"selectionLabel\">\n                    <input \n                        type=\"button\"\n                        className=\"selectionInput\" \n                        value={props.uuid} \n                        onClick={props.onSelectionChanged}\n                    />\n                </label>\n            </div>\n        </li>\n    )\n}\n\nexport default class SideBar extends React.Component {\n    constructor() {\n        super()\n        this.sceneList = React.createRef();\n    }\n\n    onSelectionChanged = (event) => {\n        if (this.props.onSelectionChanged) {\n            this.props.onSelectionChanged([event.target.value]);\n        }\n    }\n\n    onVisibleChanged = (event) => {\n        if (this.props.onVisibilityToggled) {\n            this.props.onVisibilityToggled([event.target.value], event.target.checked);\n        }\n    }\n\n    onDeleteButtonClicked = () => {\n        if (this.sceneList.current) {\n        \n            var selectElements = this.sceneList.current.getElementsByClassName(\"selected\");\n            var objectsToRemove = [];\n\n            for (let element of selectElements) {\n                objectsToRemove.push(element.id);\n            }\n\n            if (this.props.onObjectsRemoved) {\n                this.props.onObjectsRemoved(objectsToRemove);\n            }    \n        }\n    }\n\n    onUploadButtonClicked = () => {\n        var input = document.createElement('input');\n        input.type = 'file';\n        input.onchange = this.props.onFileSelected;\n        input.click();\n    }\n\n    render = function () {\n        return (\n            <div className=\"sidebar\">\n                <Button color=\"primary\" onClick={this.onUploadButtonClicked}>+</Button>\n                <Button color=\"danger\" onClick={this.onDeleteButtonClicked}>-</Button>\n\n                <ul ref={this.sceneList} className=\"sceneList\"> {\n                    Object.entries(this.props.sceneObjects).map(([key, value]) => {\n                        return <SceneListItem \n                        key={key} \n                        uuid={key} \n                        onSelectionChanged={this.onSelectionChanged}\n                        onVisibleChanged={this.onVisibleChanged}\n                        {...value} />\n                    })\n                }\n                </ul>\n            </div>\n        )\n    }   \n}","import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport { SUPPORTED_MESH_TYPES } from '../../../config.js';\n\nconst DRACO_DECODER_PATH = \"https://www.gstatic.com/draco/versioned/decoders/1.4.1/\";\n\nconst GetFileTypeFromName = function(filename) {\n    var type = filename.substring(filename.lastIndexOf('.') + 1, filename.length) || filename;\n    return SUPPORTED_MESH_TYPES[type];\n}\n\nconst ReadFileAsync = function(file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n    })\n}\n  \nconst MeshLoader = function() {\n    this.loaders = {};\n\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderConfig( {type:\"wasm\"} )\n    dracoLoader.setDecoderPath( DRACO_DECODER_PATH );\n    dracoLoader.preload();\n    this.loaders[SUPPORTED_MESH_TYPES.drc] = dracoLoader;\n\n    const plyLoader = new PLYLoader();\n    this.loaders[SUPPORTED_MESH_TYPES.ply] = plyLoader;\n\n    const stlLoader = new STLLoader();\n    this.loaders[SUPPORTED_MESH_TYPES.stl] = stlLoader;\n\n    const gltfLoader = new GLTFLoader();\n    gltfLoader.setDRACOLoader(dracoLoader);\n    this.loaders[3] = gltfLoader;\n\n    this.onLoad = null;\n    this.onProgress = null;\n    this.onError = null;\n}\n\nMeshLoader.prototype.Load = function(loader, url) {\n    return new Promise((resolve, reject) => {\n        var onLoad = (geometry) => resolve(geometry);\n        loader.load(url, onLoad, this.onProgress, reject);        \n    })\n}\n\nMeshLoader.prototype.LoadURL = async function(url, fileName) {\n    var fileType = GetFileTypeFromName(fileName || url);\n    var loader = this.loaders[fileType];\n    if (loader) {\n        try {\n            let geometry = await this.Load(loader, url);\n            if (geometry) {\n                this.onLoad(geometry, fileName);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    else if (this.onError) {\n        this.onError(\"No loaders found for this file\");\n    }\n}\n\nMeshLoader.prototype.LoadFile = async function(file) {\n    if (file) {\n        try {\n            let data = await ReadFileAsync(file);\n            this.LoadURL(data, file.name);\n        } catch(err) {\n            this.onError(err);\n        }\n    }\n}\n\nexport default MeshLoader;","import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\r\n\r\nexport default class SceneControls extends TrackballControls {\r\n    constructor(camera, domElement) {\r\n        super(camera, domElement);\r\n     \r\n        this.rotateSpeed = 1.5;\r\n        this.zoomSpeed = 2;\r\n        this.staticMoving = true;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport SceneControls from './sceneControls.js';\r\n\r\nexport const SceneEvent = {\r\n    \"selectionChanged\" : \"selectionChanged\",\r\n}\r\n\r\nexport class Scene extends THREE.EventDispatcher {\r\n    constructor(rootElement) {\r\n        super();\r\n\r\n        this.renderer = new THREE.WebGLRenderer({alpha:true});\r\n        this.renderer.setPixelRatio( window.devicePixelRatio );\r\n        rootElement.appendChild(this.renderer.domElement);\r\n\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.001, 5000);\r\n        this.camera.position.set( 0, 0, 5 );\r\n\r\n        this.controls = new SceneControls( this.camera, this.renderer.domElement );\r\n\r\n        var dLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        dLight.position.set = this.camera.position;\r\n        this.camera.add(dLight);\r\n\r\n        this.meshRoot = new THREE.AmbientLight( 0x333333 );\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.scene.add( this.camera );\r\n        this.scene.add( this.meshRoot );\r\n\r\n        this.renderer.domElement.addEventListener( 'click', this.onClick, false );\r\n\r\n        this.resize(this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight);\r\n        this.animate();\r\n    }\r\n\r\n    onClick = (event) => {\r\n        event.preventDefault();\r\n\r\n        var mouse = new THREE.Vector2();\r\n        var rect = this.renderer.domElement.getBoundingClientRect();\r\n        mouse.x = ( (event.clientX - rect.left) / (rect.right - rect.left) ) * 2 - 1;\r\n        mouse.y = -( ( event.clientY - rect.top ) / ( rect.bottom - rect.top) ) * 2 + 1;\r\n\r\n        var raycaster =  new THREE.Raycaster();                                        \r\n        raycaster.setFromCamera( mouse, this.camera );\r\n        var intersects = raycaster.intersectObjects( this.meshRoot.children );\r\n\r\n        var selection = intersects.length > 0 ? [intersects[intersects.length - 1].object.uuid] : [];\r\n        this.dispatchEvent({\r\n            type: SceneEvent.selectionChanged,\r\n            selection: selection\r\n        });\r\n    }\r\n\r\n    removeObjectsByUUID = (uuidsToRemove) => {\r\n        for (let uuid of uuidsToRemove) {\r\n            const object = this.scene.getObjectByProperty(\"uuid\", uuid);\r\n            if (object) {\r\n                object.geometry.dispose();\r\n                object.material.dispose();\r\n                this.meshRoot.remove( object );    \r\n            }\r\n        }\r\n    }\r\n\r\n    setColorOfObjects = (uuids, color) => {\r\n        for (let uuid of uuids) {\r\n            const object = this.scene.getObjectByProperty(\"uuid\", uuid);\r\n            if (object && object.material) {\r\n                object.material.color.setHex(color);\r\n            }        \r\n        }\r\n    }\r\n\r\n    setVisibilityOfObjects = (uuids, isVisible) => {\r\n        for (let uuid of uuids) {\r\n            const object = this.scene.getObjectByProperty(\"uuid\", uuid);\r\n            if (object) {\r\n                object.visible = isVisible;\r\n            }        \r\n        }\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize( width, height );\r\n        this.controls.handleResize();\r\n    }\r\n\r\n    animate = () => {\r\n        requestAnimationFrame( this.animate );\r\n        this.controls.update();\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        this.renderer.render( this.scene, this.camera );\r\n    }\r\n}","import React from 'react';\nimport * as THREE from 'three';\n\nimport { MESH_DEFAULT_COLOR, MESH_HIGHLIGHT_COLOR } from '../../config.js';\nimport SideBar from './sidebar/sidebar.js';\nimport MeshLoader from './lib/meshLoader.js';\nimport { Scene } from './lib/scene.js';\nimport './viewer.css';\n\nconst STATUS_TYPE = {\n    \"Info\": 0,\n    \"Process\": 1,\n    \"Error\": 2\n}\n\nclass ObjectInfo {\n    constructor(name) {\n        this.selected = false;\n        this.visible = true;\n        this.name = name;\n    }\n}\n\nexport default class Viewer extends React.Component {\n    constructor(){\n        super()\n        this.sideBar = React.createRef();\n        this.state = {\n            status: null,\n            sceneObjects: {}\n        };\n    }\n\n    componentDidMount() {\n        this.scene = new Scene(this.mount);\n        this.scene.addEventListener(\"selectionChanged\", (e) => this.setObjectsSelected(e.selection));\n\n        const meshLoader = new MeshLoader();\n        meshLoader.onError = this.onLoadError;\n        meshLoader.onProgress = this.onLoadProgress;\n        meshLoader.onLoad = this.addMeshToScene;\n        this.meshLoader = meshLoader;\n\n        window.addEventListener( 'resize', this.onWindowResize, false );\n    }\n\n    addMeshToScene = (geometry, fileName) => {\n        console.log(fileName + \" loaded!\");\n        const material = new THREE.MeshStandardMaterial( { color: MESH_DEFAULT_COLOR, flatShading: true } );\n        const mesh = new THREE.Mesh( geometry, material );\n        mesh.name = fileName;\n        this.scene.meshRoot.add(mesh);\n\n        var info = new ObjectInfo(fileName);\n        var uuid = mesh.uuid;\n        const sceneObjects = { ...this.state.sceneObjects, [uuid] : info };\n\n        this.setState({\n            sceneObjects: sceneObjects,\n            status: {\n                type: STATUS_TYPE.Info,\n                message: \"Loaded: \" + fileName\n            }\n        });\n    }\n\n    onLoadError = (error) => {\n        console.log(error);\n        this.setState({\n            status: {\n                type: STATUS_TYPE.Error,\n                message: \"An error occurred...\"\n            }\n        });\n    }\n\n    onLoadProgress = (event) => {\n        console.log( ( event.loaded / event.total * 100 ) + '% loaded' )\n    }\n\n    onObjectsRemoved = (uuids) => {\n        this.scene.removeObjectsByUUID(uuids);\n\n        const sceneObjects = {...this.state.sceneObjects};\n\n        for (let uuid of uuids) {\n            delete sceneObjects[uuid];\n        }\n\n        this.setState({\n            sceneObjects: sceneObjects\n        });\n    }\n\n    setObjectsSelected = (newSelection) => {\n        const sceneObjects = this.state.sceneObjects;\n        var uuidsToSelect = [];\n        var uuidsToDeselect = [];\n\n        for (let selection of newSelection) {\n            if (selection in sceneObjects && !sceneObjects[selection].selected) {\n                uuidsToSelect.push(selection);\n            }\n        }\n\n        Object.keys(sceneObjects).forEach((key) => {\n            if (newSelection.includes(key)) {\n                sceneObjects[key].selected = true;\n            }\n            else {\n                if (sceneObjects[key].selected) {\n                    uuidsToDeselect.push(key);\n                }\n                sceneObjects[key].selected = false;\n            }\n        });\n\n        this.setState({\n            selectedObjects: sceneObjects\n        });\n\n        this.scene.setColorOfObjects(uuidsToDeselect, MESH_DEFAULT_COLOR);\n        this.scene.setColorOfObjects(uuidsToSelect, MESH_HIGHLIGHT_COLOR);\n    }\n\n    setObjectsVisibility = (uuids, isVisible) => {\n        const sceneObjects = this.state.sceneObjects;\n        Object.keys(sceneObjects).forEach((key) => {\n            sceneObjects[key].visible = isVisible;\n        });\n\n        this.setState({\n            selectedObjects: sceneObjects\n        });\n\n        this.scene.setVisibilityOfObjects(uuids, isVisible);\n    }\n\n    onWindowResize = () => {\n        if (this.mount) {\n            let width = this.mount.clientWidth;\n            let height = this.mount.clientHeight;\n            this.scene.resize(width, height);\n        }\n    }\n\n    onFileSelectedForUpload = (event) => {\n        let file = event.target.files[0];\n        this.meshLoader.LoadFile(file);\n        this.setState({\n            status: {\n                type: STATUS_TYPE.Process,\n                message: \"Loading...\"\n            }\n        });\n    }\n\n    render = function () {\n        return (\n            <div className=\"viewer\">\n                <SideBar \n                    ref={this.sideBar}\n                    onFileSelected={this.onFileSelectedForUpload}\n                    onSelectionChanged={this.setObjectsSelected}\n                    onObjectsRemoved={this.onObjectsRemoved}\n                    onVisibilityToggled={this.setObjectsVisibility}\n                    sceneObjects={this.state.sceneObjects}\n                />\n                <div className=\"window-3d noselect\" ref={(mount) => { this.mount = mount }}>\n                    { this.state.status?.message &&\n                        <div className=\"status\">\n\n                            {this.state.status.type === STATUS_TYPE.Process &&\n                                <img src={process.env.PUBLIC_URL  + \"/spinner.gif\"} alt=\"o\" width=\"40px\" />\n                            }\n\n                            {this.state.status.type === STATUS_TYPE.Error &&\n                                <img src={process.env.PUBLIC_URL  + \"/error.png\"} alt=\"o\" width=\"16px\" />\n                            }\n\n                            <span>{this.state.status.message}</span>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport Navbar from './components/navbar/navbar.js';\nimport Viewer from './components/viewer/viewer.js'\n\nReactDOM.render(\n  <React.StrictMode>\n\n      <Navbar />\n      <div id=\"content\">\n        <Viewer />\n      </div>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}